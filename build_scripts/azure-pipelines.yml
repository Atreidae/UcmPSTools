trigger:
  - master

name: 'UcmPSTools'

variables:
  major: 1
  minor: 1
  patch: $(Build.BuildID)
  buildVer: $(major).$(minor).$(Build.BuildID)

pool:
  vmImage: "windows-latest"

stages:
- stage: Build
  jobs:
  - job: Build
    steps:
    - task: PowerShell@2
      inputs:
        filePath: '$(System.DefaultWorkingDirectory)/build_scripts/build.ps1'
    - task: NuGetCommand@2
      inputs:
        command: 'pack'
        packagesToPack: '$(System.DefaultWorkingDirectory)/UcmPSTools.nuspec'
        versioningScheme: byEnvVar
        versionEnvVar: buildVer
        buildProperties: 'VERSIONHERE=$(buildVer)'
    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'NuGetPackage'
        publishLocation: 'Container'
- stage: Test
  jobs:
  - job: Test
    steps:
    - task: Pester@10 ## If a new version is out, you may have to increment this
      inputs:
        scriptFolder: "$(System.DefaultWorkingDirectory)/UcmPSTools.Tests.ps1"
        resultsFile: "$(System.DefaultWorkingDirectory)/UcmPSTools.Tests.XML"
        usePSCore: true
        run32Bit: False
    - task: PublishTestResults@2
      inputs:
        testResultsFormat: "NUnit"
        testResultsFiles: "$(System.DefaultWorkingDirectory)/UcmPSTools.Tests.XML"
        failTaskOnFailedTests: true
- stage: Sign
  variables:
  - template: variables.yml
  jobs:
  - job: Sign
    steps:
      - task: DownloadSecureFile@1
        name: "RootCA"
        inputs:
          secureFile: 'RootCA'

      - task: DownloadSecureFile@1
        name: "IntermediateCA"
        inputs:
          secureFile: 'IntermediateCA'
      - task: PowerShell@2
        displayName: "Import root CA"
        inputs:
          targetType: 'inline'
          script: 'Import-Certificate -FilePath "$env:RootCA_SECUREFILEPATH" -CertStoreLocation Cert:\LocalMachine\Root'

      - task: PowerShell@2
        displayName: "Import intermediate CA"
        inputs:
          targetType: 'inline'
          script: 'Import-Certificate -FilePath "$env:IntermediateCA_SECUREFILEPATH" -CertStoreLocation Cert:\LocalMachine\CA\'

      - task: PowerShell@2
        displayName: "Import code signing cert to agent"
        inputs:
          targetType: 'inline'
          script: |
            $secretBytes = [System.Convert]::FromBase64String("$(CodeSigning)")
            # Build pfx
            $pfxcert = New-Object -TypeName System.Security.Cryptography.X509Certificates.X509Certificate2
            $keyStoreFlags = [System.Security.Cryptography.X509Certificates.X509KeyStorageFlags]::Exportable `
                -bxor [System.Security.Cryptography.X509Certificates.X509KeyStorageFlags]::MachineKeySet `
                -bxor [System.Security.Cryptography.X509Certificates.X509KeyStorageFlags]::PersistKeySet
            $pfxcert.Import($secretBytes, $null, $keyStoreFlags)
            # import to personal store
            $store = New-Object -TypeName System.Security.Cryptography.X509Certificates.X509Store -ArgumentList @("My", "CurrentUser")
            $store.Open([System.Security.Cryptography.X509Certificates.OpenFlags]::ReadWrite)
            $store.Add($pfxcert)
            $store.Close()
      - task: PowerShell@2
        displayName: "Sign PowerShell scripts"
        inputs:
          targetType: 'inline'
          script: |
            $magicToken = "#PerformScriptSigning"
            $encoding = "UTF8"
            $scriptFolder = "."
            $scripts = Get-ChildItem -Path $scriptFolder -Filter "*.ps1" -Recurse -ErrorAction Stop
            foreach ($script in $scripts) {
                try {
                    $content = Get-Content -Path $script.FullName -Encoding $encoding
                    if ($content.Contains($magicToken)) {
                        $content = $content | Where-Object {$_ -notmatch $magicToken}
                        Set-Content -Value $content -Path $script.FullName -Encoding $encoding -Force
                        # load cert
                        $codeSigningCert = Get-ChildItem Cert:\CurrentUser\My -CodeSigningCert | Select-Object -First 1
                        Write-Output "Signing script `"$($script.Name)`" with certificate `"$($codeSigningCert.Thumbprint)`""
                        # sign script
                        $null = Set-AuthenticodeSignature -Certificate $codeSigningCert -FilePath $script.FullName -TimestampServer "http://timestamp.comodoca.com/rfc3161"
                        # copy to artifact staging location
                        #$null = Copy-Item -Path $script.FullName -Destination $env:Build_ArtifactStagingDirectory
                    }
                }
                catch {
                    Write-Error $_
                }
            }
- stage: Deploy
  jobs:
  - job: Deploy
    steps:
      - task: DownloadPipelineArtifact@2
        inputs:
          buildType: 'current'
          artifactName: 'NuGetPackage'
          itemPattern: '**'
          targetPath: '$(Pipeline.Workspace)'
      